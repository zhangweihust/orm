package com.example.orm.greendao;

import com.example.orm.greendao.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table BOOK.
 */
public class Book {

    private Long id;
    /** Not-null value. */
    private String Title;
    private java.util.Date Date;
    private Double Price;
    private long AuthorId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient BookDao myDao;

    private Author author;
    private Long author__resolvedKey;


    public Book() {
    }

    public Book(Long id) {
        this.id = id;
    }

    public Book(Long id, String Title, java.util.Date Date, Double Price, long AuthorId) {
        this.id = id;
        this.Title = Title;
        this.Date = Date;
        this.Price = Price;
        this.AuthorId = AuthorId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getBookDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    /** Not-null value. */
    public String getTitle() {
        return Title;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setTitle(String Title) {
        this.Title = Title;
    }

    public java.util.Date getDate() {
        return Date;
    }

    public void setDate(java.util.Date Date) {
        this.Date = Date;
    }

    public Double getPrice() {
        return Price;
    }

    public void setPrice(Double Price) {
        this.Price = Price;
    }

    public long getAuthorId() {
        return AuthorId;
    }

    public void setAuthorId(long AuthorId) {
        this.AuthorId = AuthorId;
    }

    /** To-one relationship, resolved on first access. */
    public Author getAuthor() {
        long __key = this.AuthorId;
        if (author__resolvedKey == null || !author__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            AuthorDao targetDao = daoSession.getAuthorDao();
            Author authorNew = targetDao.load(__key);
            synchronized (this) {
                author = authorNew;
            	author__resolvedKey = __key;
            }
        }
        return author;
    }

    public void setAuthor(Author author) {
        if (author == null) {
            throw new DaoException("To-one property 'AuthorId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.author = author;
            AuthorId = author.getId();
            author__resolvedKey = AuthorId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
